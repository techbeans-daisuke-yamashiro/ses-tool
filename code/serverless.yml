service: aichat-api
frameworkVersion: "3"
custom:
  BUCKET: ${env:BUCKET_LOGS}
  pythonRequirements:
    #dockerizePip: true
    layer: true
    zip: true

provider:
  name: aws
  stage: dev
  timeout: 60
  managedPolicyArns:
    - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
  deploymentBucket:
    name: ${env:SERVERLESS_DEPLOYMENT_BUCKET}
  runtime: python3.10
  region: ap-northeast-1
  environment:
    API_NAME: ${self:service}
    DYNAMODB_TABLE_PROMPTS: ${env:DYNAMODB_TABLE_PROMPTS}
    DYNAMODB_TABLE_LOGS: ${env:DYNAMODB_TABLE_LOGS}
    BUCKET_LOGS: ${self:custom.BUCKET}
    ACCESS_KEY_ID: ${env:ACCESS_KEY_ID}
    SECRET_ACCESS_KEY: ${env:SECRET_ACCESS_KEY}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - "apigateway:*"
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - s3:PutObject
            - s3:PutObjectTagging
            - s3:PutObjectAcl
            - s3:GetObject
            - s3:GetObjectTagging
            - s3:GetObjectAttributes
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - "*"
            - "arn:aws:s3:::*"
            - "arn:aws:s3:::${self:custom.BUCKET}"
            - "arn:aws:s3:::${self:custom.BUCKET}/*"
  httpApi:
    cors:
      allowedOrigins:
        - "*"

plugins:
  - serverless-python-requirements
  - serverless-layers
  - serverless-attach-managed-policy
  - serverless-offline
functions:
  aiChat:
    handler: handler.handler
    events:
      - httpApi: '*'
    layers:
      - Ref: PythonRequirementsLambdaLayer